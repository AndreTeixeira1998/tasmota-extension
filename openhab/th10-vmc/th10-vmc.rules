// -----------------------------------
// Rule to extract data from state JSON
//
// Wifi data :
//  - SSID
//  - RSSI (signal quality)
// -----------------------------------
 
rule "Bathroom - Convert State to values"
when
	Item Bathroom_VMC_State received update
then
	// use the transformation service to retrieve the value
	val valSSID = transform("JSONPATH", "$.Wifi.SSId", Bathroom_VMC_State.state.toString)
	val valRSSI = transform("JSONPATH", "$.Wifi.RSSI", Bathroom_VMC_State.state.toString)
 
	// post the new value to the Number Item
	postUpdate(Bathroom_VMC_SSID,valSSID)
	postUpdate(Bathroom_VMC_RSSI,valRSSI)
end
 
// -----------------------------------
// Rule to extract data from sensor JSON
//
// Sensor data :
//  - Temperature
//  - Humidity
// -----------------------------------
 
rule "Bathroom - Convert Sensor to values"
when
	Item Bathroom_VMC_Sensor received update
then
	// use the transformation service to retrieve the value
	val valTemperature = transform("JSONPATH", "$.SI7021.Temperature", Bathroom_VMC_Sensor.state.toString)
	val valHumidity = transform("JSONPATH", "$.SI7021.Humidity", Bathroom_VMC_Sensor.state.toString)
 
	// post the new value to the Number Item
	postUpdate(Bathroom_VMC_Temperature,valTemperature)
	postUpdate(Bathroom_VMC_Humidity,valHumidity)
end
 
// ----------------------------------------------------------------------
// Rule to handle the automatic VMC control based on humidity level
//
// Items
//  - Bathroom_VMC_Mode        : number handling VMC mode (on, off and auto)
//  - Bathroom_VMC_Humidity    : humidity sensor item
//  - Bathroom_VMC_HumidityMax : number handling target humidity level
//  - Bathroom_VMC_Power       : switch to manage high speed VMC
// ----------------------------------------------------------------------
 
rule "Bathroom - VMC auto"
when
	Item Bathroom_VMC_Mode changed or
	Item Bathroom_VMC_Humidity received update
then
	// --------------------
	// Items initialisation
	// --------------------
 
	// set default mode to auto
	if (Bathroom_VMC_Mode.state == NULL) { postUpdate(Bathroom_VMC_Mode,2) }
 
	// set default humidity target level to 50%
	if (Bathroom_VMC_HumidityMax.state == NULL) { postUpdate(Bathroom_VMC_HumidityMax,50) }
 
	// ------------------
	// VMC mode selection 
	// ------------------
 
	// VMC forced off (0)
	if (Bathroom_VMC_Mode.state == 0 && Bathroom_VMC_Power.state != OFF) { sendCommand(Bathroom_VMC_Power,OFF) }
 
	// VMC forced on (1)
	else if (Bathroom_VMC_Mode.state == 1 && Bathroom_VMC_Power.state != ON) { sendCommand(Bathroom_VMC_Power,ON) }
 
	// VMC mode auto (2)
	else if (Bathroom_VMC_Mode.state == 2 && Bathroom_VMC_HumidityMax.state != NULL) {
		// current humitity target and turn on/off temperatures
		var Number levelTarget = Bathroom_VMC_HumidityMax.state as DecimalType
		var Number levelTurnOn = levelTarget + 1
		var Number levelTurnOff = levelTarget - 1
 
		// switch ON in case of high humidity level
		if (Bathroom_VMC_Humidity.state > levelTurnOn && Bathroom_VMC_Power.state != ON) { sendCommand(Bathroom_VMC_Power,ON) }
 
		// else, switch OFF in case of low humidity level
		else if (Bathroom_VMC_Humidity.state < levelTurnOff && Bathroom_VMC_Power.state != OFF) { sendCommand(Bathroom_VMC_Power,OFF) }
 
		// else, switch OFF ii not initialised
		else if (Bathroom_VMC_Power.state == NULL) { sendCommand(Bathroom_VMC_Power,OFF) }
	}
end

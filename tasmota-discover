#!/bin/bash
# ---------------------------------------------------
#  Tasmota devices network discovery
#
# Revision history :
#   15/04/2019, V1.0 - Creation by N. Bernaerts
#   17/04/2019, V1.1 - Adjust timeout and retries
#   18/04/2019, V1.2 - Add MQTT topic
#   23/05/2020, V1.3 - Use /version page
#   30/10/2020, V1.4 - Set retries to 2 for ESP32
#   29/12/2020, v1.5 - Add --all parameter to list all network devices
#                      Update wget tries and timeout
#   21/02/2021, v1.6 - Filter result according to --all parameter
#   23/04/2021, v1.7 - Update with new info.json format
# ---------------------------------------------------

#   Check tools availability
command -v fping >/dev/null 2>&1 || { echo "[error] Please install fping"; exit 1; }
command -v arp >/dev/null 2>&1 || { echo "[error] Please install arp"; exit 1; }
command -v wget >/dev/null 2>&1 || { echo "[error] Please install wget"; exit 1; }
command -v nmblookup >/dev/null 2>&1 && IS_NMBLOOKUP="ok"

# check --all
[ "$1" = "--all" ] && LIST_ALL="ok"

# generate temporary files and directory
TMP_DIR=$(mktemp -t -d "tasmota-XXXXXXXX")
TMP_DATA="${TMP_DIR}/data.txt"
TMP_ARP="${TMP_DIR}/arp.txt"
TMP_IP="${TMP_DIR}/ip.txt"

# display
[ "${LIST_ALL}" = "ok" ] && DEVICE="all" || DEVICE="Tasmota" 

# get first adapter netmask
NETMASK=$(ip addr | grep inet | grep brd | head -n 1 | xargs | cut -d' ' -f2)
echo "Netmask is ${NETMASK}"

# list hostnames with arp
arp -a > "${TMP_ARP}"

# list all IP from ARP
cat "${TMP_ARP}" | cut -d'(' -f2 | cut -d')' -f1 >> "${TMP_IP}"

# list all IP from fping
fping --addr --retry=2 --alive --generate "${NETMASK}" 2>/dev/null >> "${TMP_IP}"

# generate sorted IP adddress array
ARR_IP=( $(cat "${TMP_IP}" | sort --numeric-sort | uniq) )

# display number of IP
NBR_TASMOTA=0
NBR_DEVICE="${#ARR_IP[@]}"
echo "List of ${DEVICE} devices :"

# loop thru IP addresses
for DEVICE_IP in "${ARR_IP[@]}"
do
	# display current IP
	DEVICE_HOSTNAME=""
	DEVICE_DESCRIPTION=""

	# read original information page
	wget --quiet --tries=1 --timeout=2 -O - "http://${DEVICE_IP}/in" | sed "s|\}1|\n|g" | sed "s|\}2|\:|g" | tr '<' '\n' > "${TMP_DATA}"

	# if tasmota module is recognised
	if [ -s "${TMP_DATA}" ] 
	then
		# increment counter
		NBR_TASMOTA=$((NBR_TASMOTA + 1))

		# read data
		TASMOTA_MODULE=$(grep "^h3" "${TMP_DATA}" | cut -d'>' -f2)
		DEVICE_HOSTNAME=$(grep "^Hostname" "${TMP_DATA}" | head -n 1 | cut -d':' -f2)
		TASMOTA_VERSION=$(grep "Program Version:" "${TMP_DATA}" | cut -d':' -f2 | cut -d'(' -f1)
		TASMOTA_UPTIME=$(grep "^Uptime:" "${TMP_DATA}" | cut -d':' -f2-)
		TASMOTA_MQTT=$(grep "^MQTT Topic:" "${TMP_DATA}" | cut -d':' -f2-)

		# read info.json page
		wget --quiet --tries=1 --timeout=2 -O - "http://${DEVICE_IP}/info.json" | tr -d "\"}" | tr ",{" "\n" > "${TMP_DATA}"
		if [ -s "${TMP_DATA}" ] 
		then
			# read data
			EXTENSION_TYPE=$(grep "^Type:" "${TMP_DATA}" | cut -d':' -f2)
			EXTENSION_VERSION=$(grep "^Version:" "${TMP_DATA}" | tail -n 1 | cut -d':' -f2)
		fi

		# display
		DEVICE_DESCRIPTION="${TASMOTA_MODULE}, Tasmota ${TASMOTA_VERSION},"
		[ "${EXTENSION_TYPE}" != "" ] && DEVICE_DESCRIPTION="${DEVICE_DESCRIPTION} ${EXTENSION_TYPE} ${EXTENSION_VERSION},"
		DEVICE_DESCRIPTION="${DEVICE_DESCRIPTION} Up ${TASMOTA_UPTIME}, MQTT ${TASMOTA_MQTT}"

	elif [ "${LIST_ALL}" = "ok" ]
	then
		# get hostname from arp
		DEVICE_HOSTNAME=$(grep "(${DEVICE_IP})" "${TMP_ARP}" | head -n 1 | cut -d' ' -f1)

		# if no hostname try nmblookup
		[ "${DEVICE_HOSTNAME}" = "?" -a "${IS_NMBLOOKUP}" = "ok" ] && DEVICE_HOSTNAME=$(nmblookup -A ${DEVICE_IP} | grep "<00>" | grep -v "<GROUP>" | xargs | cut -d' ' -f1)
	fi

	# display
	if [ "${DEVICE_HOSTNAME}" != "" ]
	then
		DEVICE_HOSTNAME=$(echo "${DEVICE_HOSTNAME}" | tr '[:upper:]' '[:lower:]')
		echo " ${DEVICE_IP} [${DEVICE_HOSTNAME}] ${DEVICE_DESCRIPTION}"
	fi
done

# display totals
[ "${LIST_ALL}" = "ok" ] && echo "${NBR_DEVICE} devices found, including ${NBR_TASMOTA} Tasmota devices" \
                         || echo "${NBR_TASMOTA} Tasmota devices found"

# remove temporary directory
rm -r "${TMP_DIR}"
